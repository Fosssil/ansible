global
        log /dev/log    local0
        log /dev/log    local1 notice
        chroot /var/lib/haproxy
        stats socket /run/haproxy/admin.sock mode 660 level admin expose-fd listeners
        stats timeout 30s
        user haproxy
        group haproxy
        daemon

        # Default SSL material locations
        ca-base /etc/ssl/certs
        crt-base /etc/ssl/private

        # Default ciphers to use on SSL-enabled listening sockets.
        # For more information, see ciphers(1SSL). This list is from:
        #  https://hynek.me/articles/hardening-your-web-servers-ssl-ciphers/
        # An alternative list with additional directives can be obtained from
        #  https://mozilla.github.io/server-side-tls/ssl-config-generator/?server=haproxy
        ssl-default-bind-ciphers ECDH+AESGCM:DH+AESGCM:ECDH+AES256:DH+AES256:ECDH+AES128:DH+AES:RSA+AESGCM:RSA+AES:!aNULL:!MD5:!DSS
        ssl-default-bind-options no-sslv3
        tune.ssl.default-dh-param 2048

defaults
        log     global
        mode    http
        option  httplog
        option  dontlognull
        timeout connect 5000
        timeout client  30s
        timeout server  30s
        errorfile 400 /etc/haproxy/errors/400.http
        errorfile 403 /etc/haproxy/errors/403.http
        errorfile 408 /etc/haproxy/errors/408.http
        errorfile 500 /etc/haproxy/errors/500.http
        errorfile 502 /etc/haproxy/errors/502.http
        errorfile 503 /etc/haproxy/errors/503.http
        errorfile 504 /etc/haproxy/errors/504.http

frontend http
    bind *:80

    # capture/log requests
    option http-buffer-request
    http-request capture req.body len 500
    capture request header X-Forwarded-For len 15 
    log-format "%ci:%cp [%tr] %ft %b/%s %TR/%Tw/%Tc/%Tr/%Ta %ST %B %CC %CS %tsc %ac/%fc/%bc/%sc/%rc %sq/%bq %{+Q}r %[capture.req.hdr(1)] %[capture.req.hdr(0)]" 

    # rate limit to 3000 RPC requests in 1 seconds per IP
    stick-table  type ip  size 100k  expire 30s  store http_req_rate(1s)
    http-request track-sc0 src
    http-request deny deny_status 429 if { sc_http_req_rate(0) gt 3000 }

    default_backend jsonrpc
    stats enable
    stats hide-version
    stats refresh 30s
    stats show-node
    stats uri /stats
    acl letsencrypt-acl path_beg /.well-known/acme-challenge/
    use_backend letsencrypt if letsencrypt-acl
    acl is_websocket hdr(Upgrade) -i WebSocket 
    use_backend pubsub if is_websocket

frontend https
    bind *:443 ssl crt /etc/ssl/private/haproxy.pem
    bind *:8443 ssl crt /etc/ssl/private/haproxy.pem

    # capture/log requests
    option http-buffer-request
    http-request capture req.body len 500
    capture request header X-Forwarded-For len 15 
    log-format "%ci:%cp [%tr] %ft %b/%s %TR/%Tw/%Tc/%Tr/%Ta %ST %B %CC %CS %tsc %ac/%fc/%bc/%sc/%rc %sq/%bq %{+Q}r %[capture.req.hdr(1)] %[capture.req.hdr(0)]" 

    # rate limit to 3000 RPC requests in 1 seconds per IP 
    stick-table  type ip  size 100k  expire 30s  store http_req_rate(1s) 
    http-request track-sc0 src 
    http-request deny deny_status 429 if { sc_http_req_rate(0) gt 3000 } 

    default_backend jsonrpc
    stats enable
    stats hide-version
    stats refresh 30s
    stats show-node
    stats uri /stats
    #acl letsencrypt-acl path_beg /.well-known/acme-challenge/
    #use_backend letsencrypt if letsencrypt-acl
    acl is_websocket hdr(Upgrade) -i WebSocket 
    use_backend pubsub if is_websocket 

frontend wss
    bind *:8901 ssl crt /etc/ssl/private/haproxy.pem
    bind *:8444 ssl crt /etc/ssl/private/haproxy.pem
    default_backend pubsub

backend jsonrpc
    mode http
    option http-server-close
    server rpc1 145.40.96.193:8899
    server rpc2 147.28.157.187:8899

backend pubsub
    mode http
    server rpc1 145.40.96.193:8900
    server rpc2 147.28.157.187:8900

backend letsencrypt
    mode http
    server letsencrypt1 145.40.96.193:4444
    server letsencrypt2 147.28.157.187:4444
